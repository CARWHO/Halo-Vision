# Makefile for the Halo Vision Brain Module Firmware (ATmega328P)

# Toolchain Configuration (assumes avr-gcc in PATH)
PREFIX = avr-
CC = $(PREFIX)gcc
OBJCOPY = $(PREFIX)objcopy
OBJDUMP = $(PREFIX)objdump
SIZE = $(PREFIX)size
NM = $(PREFIX)nm
RM = rm -f
MKDIR = mkdir -p

# Project Configuration
MCU = atmega328p
F_CPU = 16000000UL # 16MHz Clock Frequency
TARGET = brain_module
OPTIMIZE = -Os # Optimize for size

# Build Directory
BUILD_DIR = build
OBJ_DIR = $(BUILD_DIR)/obj
BIN_DIR = $(BUILD_DIR)/bin

# Source and Include Directories
SRC_DIR = src
INC_DIR = include
HAL_SRC_DIR = $(SRC_DIR)/hal
DRV_SRC_DIR = $(SRC_DIR)/drivers
MOD_SRC_DIR = $(SRC_DIR)/modules
UTIL_SRC_DIR = $(SRC_DIR)/util
HAL_INC_DIR = $(INC_DIR)/hal
MOD_INC_DIR = $(INC_DIR)/modules
UTIL_INC_DIR = $(INC_DIR)/util

# Source Files (automatically find .c files)
C_FILES = $(wildcard $(SRC_DIR)/*.c) \
          $(wildcard $(HAL_SRC_DIR)/*.c) \
          $(wildcard $(DRV_SRC_DIR)/*.c) \
          $(wildcard $(MOD_SRC_DIR)/*.c) \
          $(wildcard $(UTIL_SRC_DIR)/*.c)

# Object Files
OBJS = $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(C_FILES))

# Include Paths
INC_PATHS = -I$(INC_DIR) -I$(HAL_INC_DIR) -I$(MOD_INC_DIR) -I$(UTIL_INC_DIR)

# Compiler Flags
CFLAGS = -Wall -Wextra -Wstrict-prototypes -mmcu=$(MCU) $(OPTIMIZE) -DF_CPU=$(F_CPU) $(INC_PATHS)
CFLAGS += -std=gnu11
CFLAGS += -ffunction-sections -fdata-sections # For linker garbage collection
CFLAGS += -g # Debug symbols
CFLAGS += -MP -MD -MT $@ -MF $(@:.o=.d) # Generate dependency files

# Linker Flags
LDFLAGS = -mmcu=$(MCU) -Wl,--gc-sections
# LDFLAGS += -Wl,-Map=$(BIN_DIR)/$(TARGET).map,--cref # Optional map file

# Output Files
ELF_FILE = $(BIN_DIR)/$(TARGET).elf
HEX_FILE = $(BIN_DIR)/$(TARGET).hex
LSS_FILE = $(BIN_DIR)/$(TARGET).lss
SYM_FILE = $(BIN_DIR)/$(TARGET).sym

# --- Targets ---
.DEFAULT_GOAL := all

all: $(HEX_FILE) $(LSS_FILE) $(SYM_FILE) size

$(ELF_FILE): $(OBJS) | $(BIN_DIR)
	@echo "LD $@"
	$(CC) $(LDFLAGS) $(OBJS) -o $@

$(HEX_FILE): $(ELF_FILE) | $(BIN_DIR)
	@echo "HEX $@"
	$(OBJCOPY) -O ihex -R .eeprom $< $@

$(LSS_FILE): $(ELF_FILE) | $(BIN_DIR)
	@echo "LSS $@"
	$(OBJDUMP) -h -S $< > $@

$(SYM_FILE): $(ELF_FILE) | $(BIN_DIR)
	@echo "SYM $@"
	$(NM) -n $< > $@

# Compile C source files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR)
	@echo "CC $<"
	@$(MKDIR) -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# Create directories
$(BIN_DIR) $(OBJ_DIR):
	@$(MKDIR) -p $@

size: $(ELF_FILE)
	@echo "Size of $(TARGET):"
	@$(SIZE) --format=avr --mcu=$(MCU) $(ELF_FILE)

clean:
	@echo "RM $(BUILD_DIR)"
	$(RM) -r $(BUILD_DIR)

# Flashing target (requires user configuration)
flash: $(HEX_FILE)
	@echo "Flashing $(HEX_FILE)..."
	@echo "NOTE: Configure avrdude command below for your programmer and port."
	# Example: avrdude -c stk500v1 -p $(MCU) -P /dev/ttyUSB0 -b 19200 -U flash:w:$(HEX_FILE):i
	# Example: avrdude -c arduino -p $(MCU) -P COM3 -b 115200 -U flash:w:$(HEX_FILE):i

# Include dependency files generated by the compiler
-include $(OBJS:.o=.d)

# Phony targets
.PHONY: all clean flash size
.SECONDARY: $(OBJS) # Keep object files even if intermediate
